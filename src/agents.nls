;; | ======================================================
;; | Filename : agents.nls 
;; | Author : Tristan de Blauwe
;; | ======================================================


;; | ========== BREEDS ==========
breed [providers provider]
breed [consumers consumer]


;; | ========== PROVIDERS ==========
providers-own [
    ;; --- General
    radius-of-operation         ;; Operational range - outside of this range, quality of service is degraded.
    profile                     ;; Good or Intermittent or Bad - Used to determine performance level

    ;; --- Knowledge
    acquaintances               ;; Neighbours in range of operation

    ;; --- Memory 
    ratings                     ;; Associative arrays containing ratings    -  Key = ID of the the other agent - Value = [Time (int) , Rating (Float)]
    certificates                ;; Ratings to be shown as certificat        -  ^ IDEM ^

    ;; --- Misc 
    counter-services-provided   ;; Count how many times does this agent provided a service during this round
    liar                        ;; Is this agent a liar ?

    ;; --- Performance 
    performance-mu              ;; Normal distribution parameter
    performance-sum             ;; Sum of performances for current round - Used for plotting
]


;; | ========== CONSUMERS ==========
consumers-own [
    ;; --- General
    radius-of-operation         ;; Operational range - Used to determine acquaintances (Agents in radius of operation)
    activity-level              ;; Probability to request a service, set randomly at spawn
    utility-gain                ;; Utility gained from using providers' services
    utility-gain-cache          ;; Last utility gained from using a provider's service

    ;; --- Trust 
    trust-model                 ;; Which trust-model is used (NoTrust or FIRE)
    group                       ;; Which group does he belongs to ? Define which components he should use
    temperature                 ;; Exploitation-Exploration dilemma
    liar                        ;; Is this agent a liar ?

    ;; --- Knowledge
    acquaintances               ;; Neighbours in range of operation
    reachable-providers         ;; Providers that the agent can contact
    reliability-factors         ;; For plotting

    ;; --- Memory 
    ratings                     ;; Associative arrays containing ratings    -  Key = ID of the the other agent - Value = [Time (int) , Rating (Float)]

    ;; --- Misc 
    has-interacted?             ;; Dit it interact with a provider during this round ?
    counter-interactions        ;; Number of interaction
    counter-failed-interactions ;; Number of failed interaction (No providers found)
]


;; | ========== CONSTRUCTORS ==========
to spawn-providers [_number _profile _color]
    create-providers _number[
        ;; --- General
        set radius-of-operation (radius * (_radius-of-operation / 100))
        set profile _profile

        ;; --- Knowledge
        set acquaintances no-turtles            

        ;; --- Memory 
        set ratings table:make
        set certificates []

        ;; --- Misc 
        set counter-services-provided 0
        ;; Pour respecter la proportion de menteurs par groupe :
        set liar false

        let proba-liar  ( (_number * (liar-per-group / 100 )) - (count providers with [liar = true and profile = _profile ]) ) /
                        ( (_number) - (count providers with [profile = _profile]) + 1) 
        if(flip-coin proba-liar)[ set liar true ]

        ;; --- Performance 
        set performance-mu (random-float-range (get-min profile) (get-max profile))
        set performance-sum 0

        ;; --- Graphical
        set-xyz-inside-sphere               ;; Distribute turtles uniformely inside a sphere
        set color (shaded-color _color)
        set shape providers-shape
        set size 0.025
    ]
end

to spawn-consumers [_number _trust-model _group _color]
    create-consumers _number[
        ;; --- General
        set radius-of-operation (radius * (_radius-of-operation / 100))
        set activity-level (random-float-range min-activity-level max-activity-level)
        set utility-gain 0            
        set utility-gain-cache 0

        ;; --- Trust 
        set trust-model _trust-model
        set group _group
        set temperature initial-temperature                 
        
        ;; Pour respecter la proportion de menteurs par groupe :
        set liar false

        let proba-liar  ( (_number * (liar-per-group / 100 )) - (count consumers with [liar = true and trust-model = _trust-model and group = _group ]) ) /
                        ( (_number) - (count consumers with [trust-model = _trust-model and group = _group]) + 1) 
        if(flip-coin proba-liar)[ set liar true ]

        ;; --- Knowledge
        set acquaintances no-turtles             
        set reachable-providers no-turtles        

        ;; --- Memory 
        set ratings table:make
        set reliability-factors (list 0 0 0 0)

        ;; --- Misc 
        set has-interacted? false
        set counter-interactions 0       
        set counter-failed-interactions 0 

        ;; --- Graphical
        set-xyz-inside-sphere               ;; Distribute turtles uniformely inside a sphere
        set color (shaded-color _color)
        set shape consumers-shape 
        set size 0.025
    ]
end


;; | ========== SHARED PROCEDURES (Used by both agents) ==========
;; Returns service's quality value after linear degradation : f(distance) = -(service-quality-degradation-alpha) * distance + world-width
to-report service-quality-degradation [_provider _consumer performance]
    let _distance ([distance _consumer] of _provider)
    let degradation (- service-quality-degradation-alpha * (_distance - [radius-of-operation] of _provider) + 1)
    report ifelse-value(  _distance > [radius-of-operation] of _provider) [performance * degradation] [performance]
end


;; | ========== PROVIDERS PROCEDURES ==========

;; Add a rating to his certificates. Keep the H (history-size) best ones
to add-certificate [rating]
    let sorted_certificates (sort-by [ [a b] -> get-value-from-rating a > get-value-from-rating b] fput rating certificates)
    set certificates sublist sorted_certificates 0 min (list history-size (length sorted_certificates))
end

;; Compute performance
to-report compute-performance-from-profile [_profile]
    let _min get-min _profile
    let _max get-max _profile

    ifelse (_profile = "intermittent")[
        report random-float-range _min _max
    ][
        report max ( list _min min (list _max (random-normal performance-mu (get-sigma _profile))))
    ]
end

;; Returns a performance according to his profile
to-report compute-performance 
    report compute-performance-from-profile profile
end

;; For lying agents - Add a fake "good" certificates without degradation
to generate-fake-certificate
    let performance (compute-performance-from-profile "good")
    add-certificate (new-rating (one-of consumers) performance)
end

;; Get the expected performance of a provider, degraded by the distance
to-report get-expected-performance [_consumer]
    report service-quality-degradation self _consumer compute-performance
end

to-report get-certificates
    if(liar = true)[
        generate-fake-certificate
    ]
    report certificates
end

;; Use a provider's service and get his performance
to-report provide-service [_consumer]
    let performance compute-performance

    set performance-sum (performance-sum + performance)
    set counter-services-provided (counter-services-provided + 1)

    report get-expected-performance _consumer 
end


;; | ========== CONSUMERS PROCEDURES ==========

;; Returns reachable providers in radius of operation ;; If none, ask acquaintance to find one (recursive)
to-report find-providers [excluded-agents length-threshold]
    if(count acquaintances > 0) [
        ;; First - Is there any providers nearby ?
        let _providers (acquaintances with [ breed = providers ])

        ;; Even if we already have providers, let's get others nearby
        if (length-threshold > 0)[

            let _acquaintances (acquaintances with [ (not member? self excluded-agents) and (breed = consumers) ])

            set excluded-agents (turtle-set self excluded-agents _acquaintances)

            ask _acquaintances[
                set _providers (turtle-set
                    _providers
                    find-providers (excluded-agents) (length-threshold - 1))
            ]
        ]
        report _providers
    ]
    report no-turtles
end

;; Returns witness for a specified provider
to-report find-witness-ratings [excluded-agents length-threshold _provider]
    let _ratings []
    ifelse(not liar)[
        set _ratings (get-ratings-from _provider)
    ][
        set _ratings (fput (generate-fake-ratings _provider) _ratings)
    ]

    ;; Si pas de ratings sur cet agent, on cherche d'autres témoins si la limite n'a pas été atteinte
    if(length _ratings = 0 and length-threshold > 0)[

        let witness (acquaintances with [ breed = consumers and not (member? self excluded-agents)])

        ;; Is there some possible witnesses ?
        if(count acquaintances > 0) [

            set witness (min-n-of (min (list branching-factor (count witness))) witness [distance _provider])
            set excluded-agents (turtle-set self excluded-agents witness)

            ask witness[
                set _ratings (sentence _ratings (find-witness-ratings excluded-agents (length-threshold - 1) _provider))
            ]
        ]
    ]
    report _ratings 
end

;; For lying agents - Returns a fake ratings
to-report generate-fake-ratings [_provider]
    let performance ([compute-performance-from-profile (get-opposite (profile))] of _provider)
    let value (service-quality-degradation (_provider) self (performance))
    report (new-rating _provider value)
end

;; Does the consumer need a service ?
to-report need-service?
  report flip-coin activity-level
end

;; Returns the selected provider by the process. The selection process relies on the agent's trust model.
;; FIRE - provider which is likely to be the most reliable. 
;; NoTrust - select randomly provider from the list.
to-report select-provider
    if(trust-model = "FIRE") [
        report selection-process-FIRE
    ]
    report one-of reachable-providers
end

;; Returns the selected provider based on the trust model. See 137-138p.
to-report selection-process-FIRE 

    let best-provider-value -10
    let best-provider nobody

    let no-trust-value-agent []

    ;; ===== STEP I =====
    ;; Compute trustworthiness of each providers
    ;; if computable
    ;;    add to HasTrustValue
    ;; else
    ;;    add to NoTrustValue
    foreach (sort reachable-providers) [ _provider ->
        let value (compute-trust-value _provider)
        ifelse (empty? value)[
            set no-trust-value-agent (fput _provider no-trust-value-agent)
        ][
            let trust (item 0 value)
            if(trust > best-provider-value)[
                set best-provider-value trust 
                set best-provider _provider 
            ]
        ]
    ]

    ;; ===== STEP II =====
    ;; If one is empty, choose the other
    ;; else, exploitation-exploration dilemma
    ifelse(empty? no-trust-value-agent or best-provider = nobody)[
        ifelse(empty? no-trust-value-agent)[
            report best-provider
        ][
            report one-of no-trust-value-agent 
        ]
    ][
        let expected-exploitation-return (best-provider-value * 10)
        let expected-exploration-return (utility-gain / max (list 1 counter-interactions))

        let normalization-term ( exp ((expected-exploitation-return) / temperature) + exp ((expected-exploration-return) / temperature))

        let pExploration ( exp ((expected-exploration-return) / temperature ) / normalization-term ) 

        ifelse (flip-coin(pExploration))[
            report one-of no-trust-value-agent ;; Exploration
        ][
            report best-provider
        ]
    ]
end

;; Inform the provider of his rating
to sent-rating [agent rating]
    ask agent [
        add-rating rating
        add-certificate rating
    ]
end


;; Returns an utility gain based on provider's service quality
to use-service [_provider]
    set utility-gain-cache ([provide-service myself] of _provider)
    set counter-interactions counter-interactions + 1
    set utility-gain utility-gain + utility-gain-cache
end


;; | ========== WORLD PROCEDURES ==========

;; Set a turtle position to a random point in a sphere
;; From : https://karthikkaranth.me/blog/generating-random-points-in-a-sphere/
;; Uniform Distribution to prevent aggregation in center
to set-xyz-inside-sphere
  let u (random-float 1000)
  let v (random-float 1)

  let theta (2 * pi * u)
  let phi (acos(2 * v - 1))

  let r (random-float 1) ^ (1 / 3)

  let x (r * sin(phi) * cos(theta)) * radius
  let y (r * sin(phi) * sin(theta)) * radius
  let z (r * cos(phi)) * radius

  setxyz x y z
end
